# movie_enrichment_project/configs/main_config.yaml

# --- Application Settings ---
output_file: "output/clean_movie_database.yaml"
raw_log_file: "output/generated_movie_data_raw_log.txt" # Ensure 'output' directory exists or logger creates it
character_image_save_path: "output/character_images"   # Ensure 'output/character_images' directory exists

# --- Session Control ---
num_new_movies_to_fetch_this_session: 1 # Start with 1 for testing
max_tmdb_top_rated_pages_to_check: 2    # How many TMDB top-rated pages to check for new movies
max_characters_from_tmdb: 40            # Max characters to fetch from TMDB credits

# --- Operation Mode ---
# Defines the primary action of the pipeline for this run.
# Options:
#   "fetch_and_add_new": Scans TMDB top-rated to discover and add NEW movies.
#   "update_all_existing": Loads ALL movies from `output_file` and updates them.
#   "update_by_list": Loads and updates specific movies from `target_movies_to_update` list.
#   "update_by_range": Loads and updates movies from `output_file` based on index range.
operation_mode: "fetch_and_add_new" # Default operation mode

# --- Behavior for "fetch_and_add_new" mode ---
# Only applicable if `operation_mode` is "fetch_and_add_new".
#
# If true: Existing movies encountered during the TMDB scan WILL be updated
#          according to `fields_to_update`.
# If false: Existing movies encountered during the TMDB scan will be SKIPPED,
#           and only truly new movies will be added.
update_existing_if_encountered_during_fetch: false # Set to `true` to enable updates on existing movies during fetch.
                                                    # Set to `false` (default) to ONLY add new movies.

# --- Specific Movie Targeting for "update_by_list" mode ---
# List of movies to specifically target for update. Each item can specify by:
# - {"title": "Movie Title", "year": "YYYY"}
# - {"imdb_id": "tt1234567"}
# - {"tmdb_id": 12345}
# Only applicable if `operation_mode` is "update_by_list".
target_movies_to_update: []
  # - { title: "A Dog's Will", year: "2000" }
  # - { imdb_id: "tt0111161" } # The Shawshank Redemption

# --- Index Targeting for "update_by_range" mode ---
# A string specifying 0-based indices or ranges of movies from the `output_file`.
# Examples: "0-4", "7", "0-4, 7, 10-12".
# Only applicable if `operation_mode` is "update_by_range".
target_existing_movies_by_index_range: "" # Example: "0-4, 7, 10-12"

# LLM Configuration
# active_llm_provider_id: "lm_studio_gemma_3_12b"
active_llm_provider_id: "google_gemini_2_0_flash_lite" # Example: switch here

prompts:
  call1_initial_data: "prompts/movie_initial_data_prompt.txt"
  call2_chars_rels: "prompts/movie_enrich_chars_relationships_prompt.txt"
  call3_analytical: "prompts/movie_analytical_data_prompt.txt"
  call4_tmdb_review_summary: "prompts/summarize_tmdb_reviews_prompt.txt"
  call_constrained_plot_relations: "prompts/plot_constrained_with_relations_prompt.txt"

# --- TMDB Image Settings ---
tmdb_image_base_url: "https://image.tmdb.org/t/p/"
tmdb_image_size: "w500" # Or "original", "w185", "w300", etc.

# --- Token Calculation ---
words_to_tokens_ratio: 1.4 # Approximate tokens per word

# Max tokens (approximate words before ratio conversion) for different LLM calls
# These are base values; actual token count for prompts will vary.
max_tokens_call_1_words: 900 # (Original 800 + 100)
max_tokens_enrich_rel_call_base_words: 350 # Base prompt words for char/rel
max_tokens_enrich_rel_char_desc_words: 80  # Additional words per character for their description
max_tokens_enrich_rel_char_rels_words: 90  # Additional words per character pair for relationships (e.g., 1.5 * 60)
max_tokens_analytical_call_words: 1400 # (Original 1200 + 200)

max_tmdb_reviews_for_summary: 3
max_tmdb_review_length_chars: 750
max_tokens_review_summary_words: 250 # Approx words for the summary LLM call
max_tokens_constrained_plot_relations_words: 500


# --- Enrichment Process Control ---
# These flags define which enrichment stages (LLM calls, API fetches) are active.
# They apply to ALL processed movies (new or existing) that are targeted for enrichment.
active_enrichers:
  initial_data: true             # LLM Call 1: movie_title, year, profile, reception, visual, topic, related_titles, search_queries
  characters_and_relations: true # TMDB Char Fetch, LLM Call 2: character_list (desc, group, alias), relationships
  fetch_character_images: true   # Downloads images for character_list (depends on characters_and_relations being true)
  analytical_data: true          # LLM Call 3: big5, myersbriggs, genre_mix, matching_tags, recommendations (titles/years/explainers)
  fetch_imdb_ids: true           # Fetches IMDb IDs for: main movie, related movies (from LLM1), recommendations (from LLM3)
  tmdb_review_summary: true      # Fetches user reviews from TMDB and summarizes them
  constrained_plot_with_relations: true

# --- Fields to Update for Existing Movies ---
# This list defines WHICH specific top-level fields in an existing MovieEntry
# will be re-generated/overwritten.
#
# - If this list is EMPTY (`[]`), it implies:
#   "Update ALL fields that are part of the `active_enrichers` and applicable to the movie."
#
# - If this list is POPULATED (e.g., `["recommendations", "imdb_id"]`), it implies:
#   "Update ONLY these specified fields, provided their corresponding enricher is active."
#
# This setting applies:
#   - If `operation_mode` is "fetch_and_add_new" AND `update_existing_if_encountered_during_fetch` is true.
#   - If `operation_mode` is "update_all_existing".
#   - If `operation_mode` is "update_by_list".
#   - If `operation_mode` is "update_by_range".
fields_to_update: [] # Example: ["tmdb_user_review_summary", "character_profile_big5"]