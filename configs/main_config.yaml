# movie_enrichment_project/configs/main_config.yaml

# --- Application Settings ---
output_file: "output/clean_movie_database.yaml"
raw_log_file: "output/generated_movie_data_raw_log.txt" # Ensure 'output' directory exists or logger creates it
character_image_save_path: "output/character_images"   # Ensure 'output/character_images' directory exists

# --- Session Control ---
num_new_movies_to_fetch_this_session: 1 # Start with 1 for testing
max_tmdb_top_rated_pages_to_check: 2    # How many TMDB top-rated pages to check for new movies
max_characters_from_tmdb: 30            # Max characters to fetch from TMDB credits

# LLM Configuration
# active_llm_provider_id: "lm_studio_gemma_3_12b"
active_llm_provider_id: "google_gemini_2_0_flash_lite" # Example: switch here

prompts:
  call1_initial_data: "prompts/movie_initial_data_prompt.txt"
  call2_chars_rels: "prompts/movie_enrich_chars_relationships_prompt.txt"
  call3_analytical: "prompts/movie_analytical_data_prompt.txt"

# --- TMDB Image Settings ---
tmdb_image_base_url: "https://image.tmdb.org/t/p/"
tmdb_image_size: "w500" # Or "original", "w185", "w300", etc.

# --- Token Calculation ---
words_to_tokens_ratio: 1.4 # Approximate tokens per word

# Max tokens (approximate words before ratio conversion) for different LLM calls
# These are base values; actual token count for prompts will vary.
max_tokens_call_1_words: 900 # (Original 800 + 100)
max_tokens_enrich_rel_call_base_words: 350 # Base prompt words for char/rel
max_tokens_enrich_rel_char_desc_words: 80  # Additional words per character for their description
max_tokens_enrich_rel_char_rels_words: 90  # Additional words per character pair for relationships (e.g., 1.5 * 60)
max_tokens_analytical_call_words: 1400 # (Original 1200 + 200)


# --- Enrichment Process Control ---
# For new movies, these flags define which enrichment stages to run.
# For existing movies (if update_existing_movies is true), these also define what to re-generate.
active_enrichers:
  initial_data: true             # LLM Call 1: movie_title, year, profile, reception, visual, topic, related_titles, search_queries
  characters_and_relations: true # TMDB Char Fetch, LLM Call 2: character_list (desc, group, alias), relationships
  fetch_character_images: true   # Downloads images for character_list (depends on characters_and_relations being true)
  analytical_data: true          # LLM Call 3: big5, myersbriggs, genre_mix, matching_tags, recommendations (titles/years/explainers)
  fetch_imdb_ids: true           # Fetches IMDb IDs for: main movie, related movies (from LLM1), recommendations (from LLM3)

# --- Update Strategy for Existing Movies ---
# If true, will re-process movies already found in the output_file.
# If false, only new movies from TMDB will be added.
update_existing_movies: false

# If update_existing_movies is true, these settings control how existing entries are modified:
# An empty list for 'keys_to_update_for_existing' means all fields generated by 'active_enrichers'
# for that movie will be re-generated and overwritten.
# If populated, only these specific top-level keys in the MovieEntry Pydantic model
# will be targeted for update. The 'active_enrichers' flags must still be true for the
# corresponding data generation stage.
keys_to_update_for_existing: # Only applies if update_existing_movies is true
  # Example: To only re-generate recommendations and update their IMDb IDs for existing movies:
  # - recommendations
  # Ensure active_enrichers.analytical_data = true and active_enrichers.fetch_imdb_ids = true

  # Example: To only re-fetch the main IMDb ID for existing movies:
  # - imdb_id
  # Ensure active_enrichers.fetch_imdb_ids = true

  # Example: To re-do character profiles and critical reception:
  # - character_profile
  # - critical_reception
  # Ensure active_enrichers.initial_data = true